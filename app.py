import streamlit as st
import pandas as pd
import requests, io, re
import fitz              # PyMuPDF
from PIL import Image

# --- Config de la page ---
st.set_page_config(
    page_title="Fiche de r√©ception",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# --- CSS pour les cards et style √©pur√© ---
st.markdown(
    """
    <style>
      .card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
      }
      .section-title {
        font-size: 1.6rem;
        margin-bottom: 0.5rem;
        color: #4A90E2;
      }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Titre principal ---
st.markdown(
    '<div class="section-title">üì• Documents de r√©ception ‚Üí FICHE DE R√âCEPTION</div>',
    unsafe_allow_html=True
)

# --- Cl√© OCR.space (via Secrets UI) ---
OCR_KEY = st.secrets.get("OCR_SPACE_API_KEY", "")
if not OCR_KEY:
    st.error("üõë Veuillez d√©finir `OCR_SPACE_API_KEY` dans les Secrets de Streamlit Cloud.")
    st.stop()

# --- Extraction de texte si PDF ¬´ num√©rique ¬ª ---
def extract_pdf_text(pdf_bytes: bytes) -> str:
    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        return "\n".join(page.get_text() for page in doc)
    except:
        return ""

# --- OCR d‚Äôune image via OCR.space ---
def ocr_image_bytes(img_bytes: bytes) -> str:
    resp = requests.post(
        "https://api.ocr.space/parse/image",
        files={ "file": ("img.png", img_bytes, "image/png") },
        data={ "apikey": OCR_KEY, "language":"fre", "isOverlayRequired": False },
        timeout=60
    )
    j = resp.json()
    if j.get("IsErroredOnProcessing"):
        return ""
    return "\n".join(p["ParsedText"] for p in j.get("ParsedResults", []))

# --- OCR page par page pour un PDF scann√© ---
def ocr_pdf_bytes(pdf_bytes: bytes) -> str:
    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    except:
        return ""
    full = ""
    for page in doc:
        pix = page.get_pixmap(dpi=300)
        png = pix.tobytes("png")
        full += ocr_image_bytes(png) + "\n"
    return full

# --- Parsing robuste des donn√©es ‚Äï r√©f√©rences, colis, pi√®ces ---
def parse_robust(raw: str) -> pd.DataFrame:
    """
    Reconna√Æt : 
      ‚Äì toutes variantes de ref / r√©f√©rence 
      ‚Äì nbr colis / nombre de colis / colis
      ‚Äì pcs / pi√®ces / nombre de pi√®ces
    et aligne les triplets en tableau.
    """
    refs   = re.findall(r"(?i)(?:ref(?:[√©e]rence)?|r√©f)\s*[:\-]?\s*(\S+)", raw)
    colis  = re.findall(r"(?i)(?:nombre\s*de\s*colis|nbr\s*colis|colis)\s*[:\-]?\s*(\d+)", raw)
    pieces = re.findall(
        r"(?i)(?:nombre\s*de\s*pi[e√®]ces|pcs(?:\s*par\s*colis)?|pi[e√®]ce?s?)\s*[:\-]?\s*(\d+)",
        raw
    )
    n = min(len(refs), len(colis), len(pieces))
    rows = []
    for i in range(n):
        c = int(colis[i])
        p = int(pieces[i])
        rows.append({
            "R√©f√©rence": refs[i],
            "Nb de colis": c,
            "pcs par colis": p,
            "total": c * p,
            "V√©rification": ""
        })
    if not rows:
        st.warning("‚ö†Ô∏è Aucune donn√©e d√©tect√©e avec les mots-cl√©s attendus.")
    return pd.DataFrame(rows)

# --- Lecture d‚Äôun Excel d√©j√† structur√© ---
def read_excel_bytes(xl_bytes: bytes) -> pd.DataFrame:
    try:
        df = pd.read_excel(io.BytesIO(xl_bytes))
        df = df.rename(columns={
            df.columns[0]: "R√©f√©rence",
            df.columns[1]: "Nb de colis",
            df.columns[2]: "pcs par colis"
        })
        df["total"] = df["Nb de colis"] * df["pcs par colis"]
        df["V√©rification"] = ""
        return df[[
            "R√©f√©rence","Nb de colis","pcs par colis","total","V√©rification"
        ]]
    except Exception as e:
        st.error(f"‚ùå Erreur lecture Excel : {e}")
        return pd.DataFrame(columns=[
            "R√©f√©rence","Nb de colis","pcs par colis","total","V√©rification"
        ])

# --- 1Ô∏è‚É£ Import du document ---
with st.container():
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown('<div class="section-title">1Ô∏è‚É£ Import</div>', unsafe_allow_html=True)
    uploaded = st.file_uploader(
        "PDF (num√©rique ou manuscrit), image (JPG/PNG) ou Excel (.xlsx)",
        type=["pdf","jpg","jpeg","png","xlsx"]
    )
    st.markdown('</div>', unsafe_allow_html=True)

if uploaded:
    data = uploaded.read()
    ext = uploaded.name.lower().split(".")[-1]
    st.markdown(f"**Fichier** : `{uploaded.name}` ‚Äî `{len(data)}` bytes")

    # --- 2Ô∏è‚É£ Extraction / OCR ---
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="section-title">2Ô∏è‚É£ Extraction du texte</div>', unsafe_allow_html=True)

        # PDF num√©rique ?
        raw = extract_pdf_text(data) if ext == "pdf" else ""
        # sinon OCR (PDF scann√© ou image)
        if not raw.strip():
            raw = ocr_pdf_bytes(data) if ext == "pdf" else ocr_image_bytes(data)

        # Affichage du texte brut
        st.subheader("üìÑ Texte brut extrait")
        st.text_area("", raw or "(vide)", height=200)

        # Conversion en DataFrame
        if ext == "xlsx":
            df = read_excel_bytes(data)
        else:
            df = parse_robust(raw or "")

        st.markdown('</div>', unsafe_allow_html=True)

    # --- 3Ô∏è‚É£ R√©sultats ---
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="section-title">3Ô∏è‚É£ R√©sultats</div>', unsafe_allow_html=True)
        st.dataframe(df, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # --- 4Ô∏è‚É£ Export Excel ---
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="section-title">4Ô∏è‚É£ Export Excel</div>', unsafe_allow_html=True)
        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            df.to_excel(w, index=False, sheet_name="FICHE_DE_RECEPTION")
        buf.seek(0)
        st.download_button(
            "üì• T√©l√©charger la FICHE DE R√âCEPTION",
            data=buf,
            file_name="fiche_de_reception.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
        st.markdown('</div>', unsafe_allow_html=True)
